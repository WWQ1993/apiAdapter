{"version":3,"sources":["../../src/index.js"],"names":["PathObject","obj","path","srcObj","pathList","_spreadPath","split","forEach","_splitPath","prop","newValue","callback","correspond","index","val","Array","isArray","length","fromPathList","move","toPath","src","target","_deepClone","newVal","push","JSON","parse","stringify","arr","pop","key","indexOf","join","i","_index","newArr","slice","Adapter","data","response","list","remove","to","fromPath","from","value","_DataAdapter","rules","dealRules","fnName","_PromiseAdapter","promise","taskQueue","Promise","then","_execTask","catch","catchcallback","error","all","Object","values","keys","res","taskName","argument","apply","prototype","_setTask","arguments","DataAdapter"],"mappings":"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","file":"index.js","sourcesContent":["/*\nProject: Adapter\nAuthor: WuWanQiang\n */\n\nclass PathObject {\n    constructor(obj, path) {\n        this.srcObj = obj;\n        this.pathList = [];\n        this._spreadPath(path.split('.'), this.srcObj);\n    }\n\n    remove() {\n        this.pathList.forEach(path => {\n            let {obj, prop} = this._splitPath(path);\n            delete obj[prop];\n        });\n    }\n    value(newValue, callback, correspond) {\n        this.pathList.forEach((path, index) => {\n            let {obj, prop} = this._splitPath(path);\n            let val = newValue;\n\n            // 传入相同长度数组则一一对应\n            if (correspond && Array.isArray(newValue) && newValue.length === this.pathList.length) {\n                val = newValue[index];\n            }\n\n            if (callback) {\n                obj[prop] = callback(obj[prop], index);\n            } else {\n                obj[prop] = val;\n            }\n        });\n    }\n    index(fromPathList, move, correspond) {\n        // 一一对应\n        if (correspond && fromPathList.length === this.pathList.length) {\n            this.pathList.forEach((toPath, index) => {\n                let src = this._splitPath(fromPathList[index]);\n                let target = this._splitPath(toPath);\n                target.obj[target.prop] = this._deepClone(src.obj[src.prop]);\n\n                if (move) {\n                    delete src.obj[src.prop];\n                }\n            });\n        } else {\n            this.pathList.forEach(toPath => {\n                let newVal = [];\n                fromPathList.forEach(path => {\n                    let src = this._splitPath(path);\n                    newVal.push(src.obj[src.prop]);\n                    if (move) {\n                        delete src.obj[src.prop];\n                    }\n                });\n                newVal = newVal.length > 1 ? newVal : newVal[0];\n\n                let target = this._splitPath(toPath);\n                target.obj[target.prop] = this._deepClone(newVal);\n            });\n        }\n    }\n\n    _deepClone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    _splitPath(path) {\n        let arr = path.split('.');\n        let prop = arr.pop();\n        let obj = this.srcObj;\n\n        arr.forEach(key => {\n            obj = obj[key];\n        });\n        // console.log(obj, prop);\n        return {\n            obj,\n            prop\n        };\n    }\n    _spreadPath(arr, obj) {\n        if (arr.indexOf('[]') === -1) {\n            this.pathList.push(arr.join('.'));\n        } else {\n            for (let i = 0; i < arr.length; i++) {\n                let key = arr[i];\n                if (key !== '[]') {\n                    obj = obj[key];\n                } else {\n                    obj.forEach((val, _index) => {\n                        let newArr = arr.slice();\n                        newArr[i] = _index;\n                        this._spreadPath(newArr, this.srcObj);\n                    });\n                    break;\n                }\n            }\n        }\n    }\n}\n\nclass Adapter {\n\n    response = {};\n\n    constructor(data = \"\") {\n        this.response = this._deepClone(data);\n    }\n\n    _remove(list = []) {\n        list.forEach(path => {\n            new PathObject(this.response, path).remove();\n        });\n    }\n\n    _index(list = []) {\n        list.forEach(({ toPath, to, fromPath, from, move = false, correspond = true }) => {\n            new PathObject(this.response, toPath || to).index(new PathObject(this.response, fromPath || from).pathList, move, correspond);\n        });\n    }\n\n    _value(list = []) {\n        list.forEach(({ path, to, value, callback = null, correspond = true }) => {\n            new PathObject(this.response, path || to).value(value, callback, correspond);\n        });\n    }\n\n    _deepClone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n}\n\nclass _DataAdapter extends Adapter {\n    constructor(data, rules) {\n        super(data);\n\n        rules && this.dealRules(rules);\n        return this.response;\n    }\n    dealRules(rules) {\n        for (let fnName in rules) {\n            this['_' + fnName](rules[fnName]);\n        }\n    }\n}\n\nclass _PromiseAdapter {\n    taskQueue = [];\n    response = {};\n    constructor(promise) {\n        if (promise instanceof Promise) {\n            promise.then(data => {\n                this.response = data;\n                this._execTask();\n            }).catch(error => {\n                if (this.catchcallback) {\n                    this.catchcallback(error);\n                } else {\n                    throw error;\n                }\n            });\n        } else {\n            Promise.all(Object.values(promise)).then(res => {\n                Object.keys(promise).forEach((key, index) => {\n                    this.response[key] = res[index];\n                });\n                this._execTask();\n            }).catch(error => {\n                if (this.catchcallback) {\n                    this.catchcallback(error);\n                } else {\n                    throw error;\n                }\n            });\n        }\n    }\n\n    _remove(list = []) {\n        list.forEach(path => {\n            new PathObject(this.response, path).remove();\n        });\n    }\n\n    _index(list = []) {\n        list.forEach(({ toPath, to, fromPath, from, move = false, correspond = true }) => {\n            new PathObject(this.response, toPath || to).index(new PathObject(this.response, fromPath || from).pathList, move, correspond);\n        });\n    }\n\n    _value(list = []) {\n        list.forEach(({ path, to, value, callback = null, correspond = true }) => {\n            new PathObject(this.response, path || to).value(value, callback, correspond);\n        });\n    }\n\n    _deepClone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    _execTask() {\n\n        this.taskQueue.forEach(({taskName, argument}) => {\n            this[taskName].apply(this, Array.prototype.slice.apply(argument));\n        });\n    }\n\n    _setTask(taskName, argument) {\n        this.taskQueue.push({\n            taskName,\n            argument\n        });\n        return this;\n    }\n    remove() {\n        return this._setTask('_remove', arguments);\n    }\n    index() {\n        return this._setTask('_index', arguments);\n    }\n    value() {\n        return this._setTask('_value', arguments);\n    }\n    _then(callback) {\n        callback(this._deepClone(this.response));\n    }\n    then() {\n        return this._setTask('_then', arguments);\n    }\n    catch(callback) {\n        this.catchcallback = callback;\n    }\n}\n\nexport default _PromiseAdapter;\nexport const DataAdapter = _DataAdapter;\n"]}