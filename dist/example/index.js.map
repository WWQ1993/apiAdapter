{"version":3,"sources":["../../example/index.js"],"names":["promise1","Promise","resolve","JSON","parse","promise2","data","a","b","index","to","from","correspond","toPath","fromPath","value","console","log","stringify","remove","move","path","callback","then","catch","e"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,QAAIA,WAAWC,QAAQC,OAAR,CAAgBC,KAAKC,KAAL,gBAAhB,CAAf;AACA,QAAIC,WAAWJ,QAAQC,OAAR,CAAgBC,KAAKC,KAAL,gBAAhB,CAAf;;AAEA,QAAIE,OAAO,uBACP;AACIC,WAAGJ,KAAKC,KAAL,gBADP;AAEII,WAAGL,KAAKC,KAAL;AAFP,KADO,EAKP;AACIK,eAAO,CACH;AACIC,gBAAI,QADR;AAEIC,kBAAM,sCAFV;AAGIC,wBAAY,KAHhB,CAGsB;AAHtB,SADG,EAMH;AACIC,oBAAQ,wBADZ;AAEIC,sBAAU;AAFd,SANG,CADX;AAYIC,eAAO,CACH;AACIL,gBAAI,WADR;AAEIK,mBAAO;AAFX,SADG;AAZX,KALO,CAAX;AAyBAC,YAAQC,GAAR,CAAYd,KAAKe,SAAL,CAAeZ,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAZ;;AAGA,wBAAY;AACRC,WAAGP,QADK;AAERQ,WAAGH;AAFK,KAAZ,EAICI,KAJD,CAIO,CACH;AACII,gBAAQ,QADZ;AAEIC,kBAAU,sCAFd;AAGIF,oBAAY,KAHhB,CAGsB;AAHtB,KADG,EAMH;AACIC,gBAAQ,wBADZ;AAEIC,kBAAU;AAFd,KANG,CAJP,EAeCK,MAfD,CAeQ,CAAC,WAAD,CAfR,EAgBCV,KAhBD,CAgBO,CACH;AACII,gBAAQ,aADZ;AAEIC,kBAAU,QAFd;AAGIM,cAAM,IAHV,CAGgB;AAHhB,KADG,CAhBP,EAuBCL,KAvBD,CAuBO,CACH;AACIM,cAAM,uBADV,EACqC;AACjCN,eAAO,CAAC,IAAD,EAAO,MAAP,EAAe,IAAf;AAFX,KADG,EAKH;AACIM,cAAM,uBADV;AAEIC,gBAFJ,oBAEaP,KAFb,EAEoBN,KAFpB,EAE2B;AAAI;AACvB,mBAAOM,QAAQN,KAAf;AACH;AAJL,KALG,CAvBP,EAmCCc,IAnCD,CAmCM,gBAAQ;AACVP,gBAAQC,GAAR,CAAYd,KAAKe,SAAL,CAAeZ,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAZ;AACH,KArCD,EAqCGkB,KArCH,CAqCS,UAACC,CAAD,EAAO;AACZT,gBAAQC,GAAR,CAAYQ,CAAZ;AACH,KAvCD","file":"index.js","sourcesContent":["import Adapter, {DataAdapter} from \"../src/index\";\nimport data1 from './data1.js';\nimport data2 from './data2.js';\n\nlet promise1 = Promise.resolve(JSON.parse(data1));\nlet promise2 = Promise.resolve(JSON.parse(data2));\n\nlet data = new DataAdapter(\n    {\n        a: JSON.parse(data1),\n        b: JSON.parse(data2)\n    },\n    {\n        index: [\n            {\n                to: 'pathId',\n                from: 'a.data.children.[].attributes.pathId',\n                correspond: false // 可选：将多项目标数据拼成数组后赋值给源数据\n            },\n            {\n                toPath: 'a.data.children.[].pid',\n                fromPath: 'a.data.children.[].attributes.pathId'\n            }\n        ],\n        value: [\n            {\n                to: 'testValue',\n                value: 'dd'\n            }\n        ]\n    }\n);\nconsole.log(JSON.stringify(data, null, 4));\n\n\nnew Adapter({\n    a: promise1,\n    b: promise2\n})\n.index([\n    {\n        toPath: 'pathId',\n        fromPath: 'a.data.children.[].attributes.pathId',\n        correspond: false // 可选：将多项目标数据拼成数组后赋值给源数据\n    },\n    {\n        toPath: 'a.data.children.[].pid',\n        fromPath: 'a.data.children.[].attributes.pathId'\n    }\n])\n.remove(['a.message'])\n.index([\n    {\n        toPath: 'a.testIndex',\n        fromPath: 'b.data',\n        move: true  // 可选\n    }\n])\n.value([\n    {\n        path: 'a.data.children.[].id',   // 等长会一一对应\n        value: ['ha', 'test', '99']\n    },\n    {\n        path: 'a.data.children.[].id',\n        callback(value, index) {   // 可选\n            return value + index;\n        }\n    }\n])\n.then(data => {\n    console.log(JSON.stringify(data, null, 4));\n}).catch((e) => {\n    console.log(e);\n});\n"]}